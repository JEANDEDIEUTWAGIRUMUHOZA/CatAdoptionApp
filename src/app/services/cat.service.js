"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Cat_1 = require("~/app/models/Cat");
var race_service_1 = require("~/app/services/race.service");
var CatService = /** @class */ (function () {
    function CatService(raceService) {
        this.raceService = raceService;
        this.cats = [];
        this.idCounter = 0;
        var batman = new Cat_1.Cat(++this.idCounter, 'Batman', 'M', { humanSociability: 1, animalSociability: 2, cleanliness: 4, energy: 5 }, new Date(1989, 6, 13), this.raceService.getOne(1), '~/assets/img/batman.png', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed massa risus, ' +
            'dictum ut enim eu, facilisis tincidunt sapien. Morbi ' +
            'faucibus ullamcorper viverra. Aenean nec euismod velit, ' +
            'et efficitur turpis. In sit amet libero quam. Fusce faucibus pellentesque ' +
            'lectus rhoncus placerat. Sed non porta urna. Maecenas velit elit, ornare eget ' +
            'venenatis ac, pulvinar at ipsum. Quisque aliquet risus nec ante ultrices, ac ' +
            'porttitor urna gravida. ' +
            'Nullam vitae varius lacus. Sed nec nulla risus.', false);
        var superman = new Cat_1.Cat(++this.idCounter, 'Superman', 'F', { humanSociability: 5, animalSociability: 3, cleanliness: 1, energy: 5 }, new Date(2015, 6, 14), this.raceService.getOne(2), '~/assets/img/superman.jpg', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed massa risus, ' +
            'dictum ut enim eu, facilisis tincidunt sapien. Morbi ' +
            'faucibus ullamcorper viverra. Aenean nec euismod velit, ' +
            'et efficitur turpis. In sit amet libero quam. Fusce faucibus pellentesque ' +
            'lectus rhoncus placerat. Sed non porta urna. Maecenas velit elit, ornare eget ' +
            'venenatis ac, pulvinar at ipsum. Quisque aliquet risus nec ante ultrices, ac ' +
            'porttitor urna gravida. ' +
            'Nullam vitae varius lacus. Sed nec nulla risus.', true);
        var aquaman = new Cat_1.Cat(++this.idCounter, 'Aquaman', 'M', { humanSociability: 1, animalSociability: 1, cleanliness: 1, energy: 4 }, new Date(1989, 8, 13), this.raceService.getOne(3), '~/assets/img/aquaman.jpg', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed massa risus, ' +
            'dictum ut enim eu, facilisis tincidunt sapien. Morbi ' +
            'faucibus ullamcorper viverra. Aenean nec euismod velit, ' +
            'et efficitur turpis. In sit amet libero quam. Fusce faucibus pellentesque ' +
            'lectus rhoncus placerat. Sed non porta urna. Maecenas velit elit, ornare eget ' +
            'venenatis ac, pulvinar at ipsum. Quisque aliquet risus nec ante ultrices, ac ' +
            'porttitor urna gravida. ' +
            'Nullam vitae varius lacus. Sed nec nulla risus.', false);
        var wonderwoman = new Cat_1.Cat(++this.idCounter, 'Wonder Woman', 'F', { humanSociability: 5, animalSociability: 5, cleanliness: 5, energy: 1 }, new Date(2015, 6, 13), this.raceService.getOne(4), '~/assets/img/wonderwoman.jpg', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed massa risus, ' +
            'dictum ut enim eu, facilisis tincidunt sapien. Morbi ' +
            'faucibus ullamcorper viverra. Aenean nec euismod velit, ' +
            'et efficitur turpis. In sit amet libero quam. Fusce faucibus pellentesque ' +
            'lectus rhoncus placerat. Sed non porta urna. Maecenas velit elit, ornare eget ' +
            'venenatis ac, pulvinar at ipsum. Quisque aliquet risus nec ante ultrices, ac ' +
            'porttitor urna gravida. ' +
            'Nullam vitae varius lacus. Sed nec nulla risus.', false);
        var joker = new Cat_1.Cat(++this.idCounter, 'The Joker', 'N', { humanSociability: 6, animalSociability: 2, cleanliness: 2, energy: 5 }, new Date(1989, 6, 15), this.raceService.getOne(5), '~/assets/img/joker.jpg', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed massa risus, ' +
            'dictum ut enim eu, facilisis tincidunt sapien. Morbi ' +
            'faucibus ullamcorper viverra. Aenean nec euismod velit, ' +
            'et efficitur turpis. In sit amet libero quam. Fusce faucibus pellentesque ' +
            'lectus rhoncus placerat. Sed non porta urna. Maecenas velit elit, ornare eget ' +
            'venenatis ac, pulvinar at ipsum. Quisque aliquet risus nec ante ultrices, ac ' +
            'porttitor urna gravida. ' +
            'Nullam vitae varius lacus. Sed nec nulla risus.', true);
        this.cats.push(batman, superman, aquaman, wonderwoman, joker);
    }
    CatService.prototype.getAll = function () {
        return this.cats;
    };
    CatService.prototype.getOne = function (id) {
        return this.cats.filter(function (cat) { return cat.id === id; })[0];
    };
    CatService.prototype.save = function (name, sex, stat, birthday, race, image, description, fiv) {
        this.cats.push(new Cat_1.Cat(++this.idCounter, name, sex, stat, birthday, race, image, description, fiv));
    };
    CatService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [race_service_1.RaceService])
    ], CatService);
    return CatService;
}());
exports.CatService = CatService;
//# sourceMappingURL=data:application/json;base64,